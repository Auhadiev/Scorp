#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stddef.h>

typedef struct Sentence_t{
    char* sentence;
    struct Sentence_t* next;
}Sentence;

char* ScanSentence(char* sentence){
    int act_size = 0;
    int max_size = 1;
    scanf("%c", &sentence[act_size]);
    while(sentence[act_size] != '\n'){
        if (act_size == max_size){
            max_size = max_size + 5;
            sentence = (char*)realloc(sentence, max_size);
        }
        scanf("%c", &sentence[++act_size]);
    }
    sentence[act_size] = '\0';
    return sentence;
}

Sentence* CreateList(){
    Sentence* head = (Sentence*)malloc(sizeof(Sentence));
    head->sentence = (char*)malloc(5);
    head->sentence = ScanSentence(head->sentence);
    Sentence* tmp = head;
    tmp->next = NULL;

    while(strcmp(tmp->sentence, "Fin.")) {
        tmp->next = (Sentence*)malloc(sizeof(Sentence));
        tmp->next->sentence = (char*)malloc(1);
        tmp->next->sentence = ScanSentence(tmp->next->sentence);
        tmp = tmp->next;
    }

    return head;
}

void PrintResult(Sentence* head){
    while(head->next){
        printf("%s\n", head->sentence);
        head = head->next;
    }
    printf("%s", head->sentence);
}

void FreeMemory(Sentence* head){
    while(head->next){
        free(head->sentence);
        free(head);
        head = head->next;
    }
    free(head->sentence);
    free(head);
}

Sentence* DeleteElem(Sentence *head){
    char deleter[100];
    Sentence* head1 = malloc(sizeof(head));
    head1 = head;
    printf("Введите значение элемента, который нужно удалить\n");
    scanf("%s", deleter);
    if(!strcmp(head->sentence, deleter)){
        head = head->next;
        return head;
    }
    while(head->next){
        if(!strcmp(head->next->sentence, deleter)){
            if(head->next->next) {
                head->next = head->next->next;
                return head1;
            }
            else
                head->next = NULL;
            return head1;
        }
        head = head->next;
    }
}

Sentence* swap(Sentence* head){
    char elem1[100], elem2[100];
    Sentence *next1, *next2, *prev1, *prev2, *ptr1, *ptr2;
    ptr1 = NULL;
    ptr2 = NULL;
    prev1 = head;
    prev2 = head;
    printf("Введите значения элементов\n");
    scanf("%s %s", elem1, elem2);
    if(!strcmp(prev1->sentence, elem1)){
        prev1 = NULL;
        ptr1 = head;
    } else {
        while (strcmp(prev1->next->sentence, elem1))
            prev1 = prev1->next;
        ptr1 = prev1->next;
    }
    if(!strcmp(prev2->sentence, elem2)){
        prev2 = NULL;
        ptr2 = head;
    } else {
        while (strcmp(prev2->next->sentence, elem2))
            prev2 = prev2->next;
        ptr2 = prev2->next;
    }
    if((ptr1 == NULL) || (ptr2 == NULL))
        return head;
    if(!ptr1->next)
        next1 = NULL;
    else
        next1 = ptr1->next;

    if(!ptr2->next)
        next2 = NULL;
    else
        next2 = ptr2->next;

    if(next1 == ptr2){
        ptr2->next = ptr1;
        ptr1->next = next2;
        if (ptr1 != head)
            prev1->next = ptr2;

    }else if (next2 == ptr1){
        ptr1->next = ptr2;
        ptr2->next = next1;
        if(ptr2 != head)
            prev2->next = ptr1;
    } else {
        if (ptr1 != head)
            prev1->next = ptr2;
        ptr2->next = next1;
        if (ptr2 != head)
            prev2->next = ptr1;
        ptr1->next = next2;
    }
    if (ptr1 == head)
        return ptr2;
    if (ptr2 == head)
        return ptr1;
    return head;
}

int main(){

    Sentence* head = CreateList();
    //head = DeleteElem(head);
    head = swap(head);
    PrintResult(head);
    FreeMemory(head);
    return 0;

}
